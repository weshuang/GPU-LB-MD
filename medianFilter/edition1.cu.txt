#include "medianFilter_kernel.h"
#include <cuda.h>
//#include <helper_cuda.h>
//#include "cuPrintf.cu"

/* You can modify this file as you want. */
__global__ void mfKernel(const RGB* src, RGB* dst, int r, int w, int h);

//#define CCE checkCudaErrors




extern "C" void
medianFilter(
             const uchar *h_src,
             uchar *h_dst,
             int w,
             int h,
             int r)
{
    /* Write your code here */
	RGB* d_dst = NULL;
	RGB* d_src = NULL;

	cudaMalloc( (void**)&d_dst, sizeof(RGB)*w*h);
	cudaMalloc( (void**)&d_src, sizeof(RGB)*w*h);
	cudaMemcpy( d_src, (RGB*)h_src, w*h*3, cudaMemcpyHostToDevice); 

	mfKernel<<< h-2*r, w-2*r >>>( d_src, d_dst, r, w, h); 

	cudaMemcpy( h_dst, (uchar*)d_dst, w*h*3, cudaMemcpyDeviceToHost);

	cudaFree(d_dst); 
	cudaFree(d_src);
}


__global__ void mfKernel(const RGB* src, RGB* dst, int r, int w, int h)
{
	
	const int px=threadIdx.x+r;
	const int py=blockIdx.x+r;
	RGB pixels[9];
	const int pixelamount=9;

	int i=0, j;

    for (int dy = -r; dy <= r; ++dy)
    {
        for (int dx = -r; dx <= r; ++dx)
        {        
			pixels[i++] = src[(py+dy)*w+(px+dx)];
        }
    }
    
	//bubble sort, arrange from big to small
	for(i=pixelamount-1; i>0; i--)
	{
		for(j=0; j<i; j++)
		{
			if( computeLuminance(pixels[j].R, pixels[j].G, pixels[j].B) < computeLuminance(pixels[j+1].R, pixels[j+1].G, pixels[j+1].B))
			{
				RGB temp;
				temp=pixels[j];
				pixels[j]=pixels[j+1];
				pixels[j+1]=temp;
			}
		}
	}

    dst[py * w + px] = pixels[((2*r+1)*(2*r+1)-1)/2]; // copy median to output
}